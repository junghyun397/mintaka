openapi: 3.0.3
info:
  title: Mintaka Server API
  version: 1.0.0
  description: REST API for the mintaka engine server.
servers:
  - url: /
security:
  - ApiPassword: []
paths:
  /status:
    get:
      summary: Get server status
      tags: [Status]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
  /sessions:
    post:
      summary: Create a new session
      tags: [Session Lifecycle]
      responses:
        '201':
          description: Session created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionKey'
  /sessions/{sid}:
    delete:
      summary: Destroy a session
      tags: [Session Lifecycle]
      parameters:
        - $ref: '#/components/parameters/SessionKey'
      responses:
        '204':
          description: Session destroyed
        '404':
          $ref: '#/components/responses/SessionNotFound'
  /sessions/{sid}/commands:
    post:
      summary: Send a command to a session
      tags: [Session Interaction]
      parameters:
        - $ref: '#/components/parameters/SessionKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Command'
      responses:
        '222':
          description: Command accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionCommandResponse'
        '404':
          $ref: '#/components/responses/SessionNotFound'
        '409':
          $ref: '#/components/responses/SessionInComputing'
  /sessions/{sid}/launch:
    post:
      summary: Launch computation
      tags: [Session Computation]
      parameters:
        - $ref: '#/components/parameters/SessionKey'
      responses:
        '200':
          description: Computation launched
        '404':
          $ref: '#/components/responses/SessionNotFound'
        '409':
          $ref: '#/components/responses/SessionInComputing'
  /sessions/{sid}/abort:
    post:
      summary: Abort computation
      tags: [Session Computation]
      parameters:
        - $ref: '#/components/parameters/SessionKey'
      responses:
        '204':
          description: Abort signal sent
        '404':
          $ref: '#/components/responses/SessionNotFound'
        '409':
          $ref: '#/components/responses/SessionIdle'
  /sessions/{sid}/result:
    get:
      summary: Get last computed best move
      tags: [Session Interaction]
      parameters:
        - $ref: '#/components/parameters/SessionKey'
      responses:
        '200':
          description: Best move result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BestMove'
        '204':
          $ref: '#/components/responses/SessionNeverLaunched'
        '404':
          $ref: '#/components/responses/SessionNotFound'
  /sessions/{sid}/stream:
    get:
      summary: Subscribe to session events (SSE)
      tags: [Session Computation]
      parameters:
        - $ref: '#/components/parameters/SessionKey'
      responses:
        '200':
          description: SSE stream of session events. Events can be `response`, `best-move`, or `terminate`.
          content:
            text/event-stream:
              schema:
                type: string
        '404':
          $ref: '#/components/responses/SessionNotFound'
        '409':
          $ref: '#/components/responses/StreamAcquired'
  /sessions/{sid}/hibernate:
    post:
      summary: Hibernate an idle session to disk
      tags: [Session Lifecycle]
      parameters:
        - $ref: '#/components/parameters/SessionKey'
      responses:
        '204':
          description: Session hibernated
        '404':
          $ref: '#/components/responses/SessionNotFound'
  /sessions/{sid}/wakeup:
    post:
      summary: Wake up a hibernated session from disk
      tags: [Session Lifecycle]
      parameters:
        - $ref: '#/components/parameters/SessionKey'
      responses:
        '204':
          description: Session woken up
        '404':
          description: Session file not found on disk.
components:
  schemas:
    SessionKey:
      description: A unique session identifier.
      type: string
      format: uuid
      example: '737a095a-211a-4704-80c4-9e7a85c24345'
    Health:
      type: object
      properties:
        available_workers:
          type: integer
          description: Number of available CPU cores for computation.
    Command:
      description: A command sent to the game agent (e.g., place a stone).
      type: object
      example: { "Play": "h8" }
    SessionCommandResponse:
      type: object
      properties:
        board_hash:
          type: string
        game_result:
          type: object
          nullable: true
    BestMove:
      type: object
      properties:
        pos:
          type: integer
        score:
          type: integer
        nodes:
          type: integer
        pv:
          type: array
          items:
            type: integer
  parameters:
    SessionKey:
      name: sid
      in: path
      required: true
      description: Uuid session identifier.
      schema:
        $ref: '#/components/schemas/SessionKey'
  responses:
    SessionNotFound:
      description: Session not found.
    SessionInComputing:
      description: Session is busy computing.
    SessionIdle:
      description: Session is not computing.
    StreamAcquired:
      description: The response stream for this session is already acquired.
    SessionNeverLaunched:
      description: Session exists but has not been launched to compute a result.
  securitySchemes:
    ApiPassword:
      type: apiKey
      in: header
      name: Api-Password
